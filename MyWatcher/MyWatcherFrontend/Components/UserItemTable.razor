@using MyWatcher.Models
@using MudBlazor
@using MyWatcher.Models.UserItem

<div>
    <h3>UserItemTable</h3>
    <MudTable Items="@UserItemTableList" Hover="true" Striped="true" Loading="@LoadingTable" LoadingProgressColor="Color.Info" Filter="new Func<UserItemTableDTO,bool>(FilterTableFunction)">
        <ToolBarContent>
            <MudButton @onclick="@(() => OnRefresh.InvokeAsync())" Variant="Variant.Filled" Color="Color.Primary" Style="align-self: center; margin-right: 20px">Refresh</MudButton>
            <MudButton @onclick="@(() => OnAdd.InvokeAsync())" Variant="Variant.Filled" Color="Color.Primary" Style="align-self: center; margin-right: 20px">Add Items</MudButton>
            <MudButton @onclick="@(() => OnForceRescan.InvokeAsync())" Variant="Variant.Filled" Color="Color.Primary" Style="align-self: center">Rescan</MudButton>
            <MudSpacer />
            <MudTextField @bind-Value="_searchText" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Style="width: 35%"><MudTableSortLabel SortBy="new Func<UserItemTableDTO, object>(x=>x.Name)"><strong>Name</strong></MudTableSortLabel></MudTh>
            <MudTh Style="width: 15%"><MudTableSortLabel SortBy="new Func<UserItemTableDTO, object>(x=>x.Price)"><strong>Price</strong></MudTableSortLabel></MudTh>
            <MudTh Style="width: 25%"><MudTableSortLabel SortBy="new Func<UserItemTableDTO, object>(x=>x.LastScan)"><strong>Last Scanned</strong></MudTableSortLabel></MudTh>
            <MudTh Style="width: 15%"><MudTableSortLabel SortBy="new Func<UserItemTableDTO, object>(x=>x.Active)"><strong>Active</strong></MudTableSortLabel></MudTh>
            <MudTh Style="width: 5%; height:10px"><strong></strong></MudTh>
        </HeaderContent>
        <NoRecordsContent>
            <Empty Simple/>
        </NoRecordsContent>
        <RowTemplate>
            <MudTd DataLabel="Name" Style="height:10px">@context.Name</MudTd>
            <MudTd DataLabel="Price" Style="height:10px">@ShowPriceText(@context.Price)</MudTd>
            <MudTd DataLabel="LastScan" Style="height:10px">@DateToTime(@context.LastScan)</MudTd>
            <MudTd>
                @*<MudSwitch @bind-Checked="@context.Active" Label="@(context.Active ? "Active " : "Inactive")" Color="Color.Primary"></MudSwitch>*@
                <MudSwitch Checked="@context.Active" CheckedChanged="((bool value) => UserItemActive(context))" Label="@(context.Active ? "Active " : "Inactive")" Color="Color.Primary"></MudSwitch>
            </MudTd>
            <MudTd>
                <MudButton @onclick="@(() => OnDelete.InvokeAsync(@context))"><MudIcon Icon="@Icons.Material.TwoTone.Delete" Color="Color.Error"></MudIcon></MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            @*<MudTablePager InfoFormat="@($"Center {first_item}-{last_item} of {all_items})" HorizontalAlignment="HorizontalAlignment.Center" />*@
            <MudTablePager PageSizeOptions="new int[]{10, 25, 50, 100}" />
        </PagerContent>
    </MudTable>
</div>

@code {
    [Parameter] public List<UserItemTableDTO> UserItemTableList { get; set; }
    [Parameter] public EventCallback<UserItemTableDTO> OnDelete { get; set; }
    [Parameter] public EventCallback<UserItemTableDTO> OnUpdate { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }
    [Parameter] public EventCallback OnAdd { get; set; }
    [Parameter] public EventCallback OnForceRescan { get; set; }
    public bool LoadingTable { get; set; } = true;
    private string _searchText;
    private string _currency = "DKK";

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        /*
        if (parameters.TryGetValue<List<UserItemTableDTO>>(nameof(UserItemTableList), out var value))
        {
            if (value is null) { Console.WriteLine("The value of 'UserItemList' is null."); }
            else { Console.WriteLine($"The value of 'UserItem' is set with count {value.Count}"); }
        }
        */
        await base.SetParametersAsync(parameters);
    }
    
    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await OnParametersSetAsync();
            StateHasChanged();
        }
    }

    private string ShowPriceText(double price)
    {
        if (price == 0) return "Unknown";
        return price + " " + _currency;
    }

    private string DateToTime(DateTime? dateTime)
    {
        if (dateTime == null) return "No scan yet";
        return dateTime.Value.ToString("dddd, dd MMMM yyyy");
    }
    
    private bool FilterTableFunction(UserItemTableDTO element) => FilterTable(element, _searchText);
    private bool FilterTable(UserItemTableDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if (element.URL.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            //return true;
        return false;
    }

    private async Task UserItemActive(UserItemTableDTO dto)
    {
        dto.Active = !dto.Active;
        await OnUpdate.InvokeAsync(dto);
    }

    private async Task AddUserItem()
    {
        await OnAdd.InvokeAsync();
    }
}