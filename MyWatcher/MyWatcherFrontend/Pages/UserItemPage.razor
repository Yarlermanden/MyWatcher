@page "/pricerunner"
@using MyWatcher.Models
@using MyWatcherFrontend.Services
@using MyWatcher.Entities
@using MyWatcherFrontend.Components
@inject HttpClient Http
@inject IApiService _apiService
@using MudBlazor
@inject IDialogService DialogService

<h1>Pricerunner Items</h1>
<p>The following table shows all the items you track</p>
<UserItemTable @ref=@_userItemTable UserItemTableList=@_items OnDelete="@((userItem) => DeleteUserItem(userItem))" OnUpdate="@UpdateUserItem"/>
<MudButton @onclick="AddUserItem" Variant="Variant.Filled" Color="Color.Primary" Style="align-self: center">Add Items</MudButton>
<AddUserItemComponent @ref=@_addUserItemComponent/>

@code {
    private UserItemTable _userItemTable;
    private AddUserItemComponent _addUserItemComponent;
    private List<UserItemTableDTO> _items = new List<UserItemTableDTO>();
    private User _user = new User() {Id = 1};

    protected override async Task OnInitializedAsync()
    {
        _userItemTable = new UserItemTable();
        _addUserItemComponent = new AddUserItemComponent();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _items = await _apiService.GetUserItems(_user);
            _userItemTable.LoadingTable = false;
            StateHasChanged();
        }
    }

    private async Task AddUserItem()
    {
        var parameters = new DialogParameters();
        var dialog = DialogService.Show<AddUserItemComponent>("Add", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var dto = (UserItemAddDTO)result.Data;
            dto.UserId = _user.Id;
            var (success, id) = await _apiService.AddUserItem(dto);
            if (success)
            {
                //Get the new item from the database
                var userItemTableDTO = new UserItemTableDTO()
                {
                    Name = dto.Name,
                    Active = true,
                    Id = id
                };
                _items.Add(userItemTableDTO);
                StateHasChanged();
            }
            else
            {
                //Todo show error alert
            }
        }
    }
    
    private async Task DeleteUserItem(UserItemTableDTO userItem)
    {
        var parameters = new DialogParameters();
        //parameters.Add("ContentText", "Are you sure you want to delete this item? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<DeleteUserItem>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Console.WriteLine(userItem.Id);
            var dto = new UserItemDeleteDTO()
            {
                Id = userItem.Id,
                UserId = _user.Id
            };
            var success = await _apiService.DeleteUserItem(dto);
            if (success)
            {
                _items.Remove(userItem);
                StateHasChanged();
            }
            else
            {
                //Todo show error alert
            }
        }
    }

    private async Task UpdateUserItem(UserItemTableDTO userItem)
    {
        var dto = new UserItemUpdateDTO()
        {
            Id = userItem.Id,
            Active = userItem.Active,
            UserId = _user.Id,
        };
        await _apiService.UpdateUserItem(dto);
    }
}