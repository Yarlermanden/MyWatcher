@page "/pricerunner"
@using MyWatcher.Models
@using MyWatcherFrontend.Services
@using MyWatcher.Entities
@using MyWatcherFrontend.Components
@inject HttpClient Http
@inject IApiService _apiService
@using MudBlazor
@inject IDialogService DialogService

<h1>Pricerunner Items</h1>
<p>The following table shows all the items you track</p>
<UserItemTable @ref=@_userItemTable UserItemTableList=@_items/>
<MudButton OnClick="@(() => _addUserItemComponent.Visible = true)" Variant="Variant.Filled" Color="Color.Primary">Add item</MudButton>
<MudButton @onclick="DeleteUser" Variant="Variant.Filled" Color="Color.Error">Delete Item</MudButton>
<AddUserItemComponent @ref=@_addUserItemComponent/>

@code {
    private UserItemTable _userItemTable;
    private AddUserItemComponent _addUserItemComponent;
    private List<UserItemTableDTO> _items = new List<UserItemTableDTO>();
    private User _user = new User() {Id = 1};

    protected override async Task OnInitializedAsync()
    {
        _userItemTable = new UserItemTable();
        _addUserItemComponent = new AddUserItemComponent();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _items = await _apiService.GetUserItems(_user);
            _userItemTable.LoadingTable = false;
            StateHasChanged();
        }
    }

    public async Task ShowAddUserItemComponent()
    {
        _addUserItemComponent.Visible = true;
        StateHasChanged();
    }
    
    private void DeleteUser()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Are you sure you want to delete this item? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        DialogService.Show<DeleteUserItem>("Delete", parameters, options);
    }
}