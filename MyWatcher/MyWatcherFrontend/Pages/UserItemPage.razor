@page "/pricerunner"
@using MyWatcher.Models
@using MyWatcherFrontend.Services
@using MyWatcher.Entities
@using MyWatcherFrontend.Components
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject IApiService _apiService
@using MudBlazor
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject ISnackbar _snackbar

<h1>Pricerunner Items</h1>
<p>The following table shows all the items you track</p>
<MudAlert Style="width: 20%; align-self: center" Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="@(() => _alertHidden=true)" hidden="@_alertHidden">@_alertMessage</MudAlert>
<UserItemTable @ref=@_userItemTable 
               UserItemTableList=@_items 
               OnDelete="@((userItem) => DeleteUserItem(userItem))" 
               OnUpdate="@UpdateUserItem" 
               OnAdd="@AddUserItem"
               OnRefresh="@RefreshUserItems" 
               OnForceRescan="@ForceRescan"
/>
<AddUserItemComponent @ref=@_addUserItemComponent/>

@code {
    private UserItemTable _userItemTable;
    private AddUserItemComponent _addUserItemComponent;
    private List<UserItemTableDTO> _items;
    private User _user = new User() {Id = 1};
    private bool _alertHidden = true;
    private string _alertMessage;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _userItemTable = new UserItemTable();
        _items = new List<UserItemTableDTO>();
        _addUserItemComponent = new AddUserItemComponent();
        await SetupHubConnection();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _items = await _apiService.GetUserItems(_user);
            _userItemTable.LoadingTable = false;
            StateHasChanged();
        }
    }
    
    private async Task SetupHubConnection()
    {
        _hubConnection = new HubConnectionBuilder()
            //.WithUrl(NavigationManager.ToAbsoluteUri($"/HubService?userId={_user.Id}"))
            //.WithUrl(NavigationManager.ToAbsoluteUri($"/CommunicationHub?userId={_user.Id}"))
            .WithUrl(NavigationManager.ToAbsoluteUri("https://localhost:5001/ClientHub"))
            //.AddMessagePackProtocol()
            .Build();

        _hubConnection.On("ScrapingFinished", async () =>
        {
            _snackbar.Add("Scraping finished", Severity.Success);
            await RefreshUserItems();
            //Update all items
            //Give notification if user started the scraping
        });
        
        //HubConnection.On("UpdateUserItem", )
        await _hubConnection.StartAsync();
    }

    private async Task AddUserItem()
    {
        var parameters = new DialogParameters();
        var dialog = DialogService.Show<AddUserItemComponent>("Add", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var dto = (UserItemAddDTO)result.Data;
            dto.UserId = _user.Id;
            var (success, id, errorMessage) = await _apiService.AddUserItem(dto);
            if (success)
            {
                //Get the new item from the database
                var userItemTableDTO = new UserItemTableDTO()
                {
                    Name = dto.Name,
                    Active = true,
                    Id = id
                };
                //_items.Add(userItemTableDTO);
                _items.Insert(0, userItemTableDTO);
            }
            else
            {
                _alertMessage = errorMessage;
                _alertHidden = false;
            }
            StateHasChanged();
        }
    }
    
    private async Task DeleteUserItem(UserItemTableDTO userItem)
    {
        var parameters = new DialogParameters();
        //parameters.Add("ContentText", "Are you sure you want to delete this item? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<DeleteUserItem>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Console.WriteLine(userItem.Id);
            var dto = new UserItemDeleteDTO()
            {
                Id = userItem.Id,
                UserId = _user.Id
            };
            var (success, errorMessage) = await _apiService.DeleteUserItem(dto);
            if (success)
            {
                _items.Remove(userItem);
                StateHasChanged();
            }
            else ShowErrorMessage(errorMessage);
        }
    }

    private async Task UpdateUserItem(UserItemTableDTO userItem)
    {
        var dto = new UserItemUpdateDTO()
        {
            Id = userItem.Id,
            Active = userItem.Active,
            UserId = _user.Id,
        };
        var (success, errorMessage) = await _apiService.UpdateUserItem(dto);
        if (!success) ShowErrorMessage(errorMessage);
    }

    private async Task RefreshUserItems()
    {
        _userItemTable.LoadingTable = true;
        _items = await _apiService.GetUserItems(_user);
        _userItemTable.LoadingTable = false;
        StateHasChanged();
    }

    private async Task ForceRescan()
    {
        Console.WriteLine("Force rescan");
        var request = new ForceRescanRequest()
        {
            ServiceId = 1,
            UserId = _user.Id
        };
        var success = await _apiService.ForceRescanUserItems(request);
        if (!success) ShowErrorMessage("Scraper service not running");
    }

    private void ShowErrorMessage(string errorMessage)
    {
        _alertMessage = errorMessage;
        _alertHidden = false;
        StateHasChanged();
    }
    
    public virtual async ValueTask DisposeAsync()
    {
        if (_hubConnection == null) return;
        try
        {
            await _hubConnection.StopAsync();
        }
        finally
        {
            await _hubConnection.DisposeAsync();
        }
    }
}