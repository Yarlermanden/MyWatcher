@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using MyWatcher.Entities
@using MyWatcher.Models.User
@using MyWatcherFrontend.Services
@inject IApiService _apiService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager _navigationManager
@inject UserManager<User> _userManager

<h3>Login</h3>

<div style="max-width: 400px;">
    <MudCard>
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Reguired="true" @ref="_email"/>
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="_password"
                              InputType="InputType.Password"
                              Required="true"
                              RequiredError="Password is required!"/>
            </MudForm>
            <MudText Class="pa-4 mud-secondary-text">@_error</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="LoginAsUser">Register</MudButton>
        </MudCardActions>
    </MudCard>
</div>


@code {
    bool success;
    string[] errors = { };
    string _error = "";
    MudTextField<string> _email;
    MudTextField<string> _password;
    MudForm form;
    
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = await _userManager.GetUserAsync(authState.User);
    }

    private async Task LoginAsUser()
    {
        var dto = new UserLoginDTO()
        {
            Email = _email.Value,
            Password = _password.Value
        };
        var user = await _apiService.LoginUser(dto);
        if (user == null) _error = "Wrong username or password";
        else
        {
            _navigationManager.NavigateTo("/");
            //set user in memcache
            //redirect
            //Response.Cookies.Append("MyCookie", "value1");
            
        }
    }
}